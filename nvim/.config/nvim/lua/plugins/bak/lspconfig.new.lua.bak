return {
	"neovim/nvim-lspconfig",
	lazy = false,
	dependencies = {
		"windwp/nvim-autopairs",
		"williamboman/mason.nvim",
		"creativenull/efmls-configs-nvim",
		"hrsh7th/nvim-cmp",
		"hrsh7th/cmp-buffer",
		"hrsh7th/cmp-nvim-lsp",
	},
    config = function()
        local cmp_nvim_lsp = require("cmp_nvim_lsp")
        local capabilities = cmp_nvim_lsp.default_capabilities()
        local lspconfig = require("lspconfig")
        local mason_lspconfig = require("mason-lspconfig")

        local signs = { Error = " ", Warn = " ", Hint = "󰌵 ", Info = " " }
        for type, icon in pairs(signs) do
            local hl = "DiagnosticSign" .. type
            vim.fn.sign_define(hl, { text = icon, texthl = hl, numhl = "" })
        end

        local on_attach = function(_, bufnr)
            local opts = { noremap = true, silent = true, buffer = bufnr }

            vim.keymap.set('n', 'gD', vim.lsp.buf.declaration, opts)
            vim.keymap.set('n', 'gd', vim.lsp.buf.definition, opts)
            vim.keymap.set('n', '<leader>h', vim.lsp.buf.hover, opts)
            vim.keymap.set('n', 'gi', vim.lsp.buf.implementation, opts)
            vim.keymap.set('n', '<C-k>', vim.lsp.buf.signature_help, opts)
            vim.keymap.set('n', '<space>wa', vim.lsp.buf.add_workspace_folder, opts)
            vim.keymap.set('n', '<space>wr', vim.lsp.buf.remove_workspace_folder, opts)
            vim.keymap.set("n", "gr", require("telescope.builtin").lsp_references, opts)
            vim.keymap.set('n', '<space>wl', function()
            print(vim.inspect(vim.lsp.buf.list_workspace_folders()))
            end, opts)
            vim.keymap.set('n', '<space>D', vim.lsp.buf.type_definition, opts)
            vim.keymap.set('n', '<space>rn', vim.lsp.buf.rename, opts)
            vim.keymap.set({ 'n', 'v' }, '<space>ca', vim.lsp.buf.code_action, opts)
            vim.keymap.set('n', 'gr', vim.lsp.buf.references, opts)
            vim.keymap.set('n', '<space>f', function()
                vim.lsp.buf.format { async = true }
            end, opts)
        end

        -- lua
        lspconfig.lua_ls.setup({
            capabilities = capabilities,
            on_attach = on_attach,

            globals = { "vim" },
            settings = { -- custom settings for lua
                Lua = {
                    -- make the language server recognize "vim" global
                    diagnostics = {},
                    workspace = {
                        -- make language server aware of runtime files
                        library = {
                            [vim.fn.expand("$VIMRUNTIME/lua")] = true,
                            [vim.fn.stdpath("config") .. "/lua"] = true,
                        },
                    },
                },
            },
        })

        -- python
        lspconfig.pyright.setup({
            capabilities = capabilities,
            on_attach = on_attach,
            settings = {
                pyright = {
                    disableOrganizeImports = false,
                    analysis = {
                        useLibraryCodeForTypes = true,
                        autoSearchPaths = true,
                        diagnosticMode = "workspace",
                        autoImportCompletions = true,
                    },
                },
            },
        })

        local luacheck = require("efmls-configs.linters.luacheck")
        local stylua = require("efmls-configs.formatters.stylua")
        local flake8 = require("efmls-configs.linters.flake8")
        local black = require("efmls-configs.formatters.black")

        -- efm
        lspconfig.efm.setup({
            filetypes = {
                "lua",
                "python",
                -- "json",
                -- "jsonc",
                -- "sh",
                -- "javascript",
                -- "javascriptreact",
                -- "typescript",
                -- "typescriptreact",
                -- "svelte",
                -- "vue",
                -- "markdown",
                -- "docker",
                -- "solidity",
                -- "html",
                -- "css",
            },
            init_options = {
                documentFormatting = true,
                documentRangeFormatting = true,
                hover = true,
                documentSymbol = true,
                codeAction = true,
                completion = true,
            },
            settings = {
                languages = {
                    lua = { luacheck, stylua },
                    python = { flake8, black },
                    -- typescript = { eslint_d, prettierd },
                    -- json = { eslint_d, fixjson },
                    -- jsonc = { eslint_d, fixjson },
                    -- sh = { shellcheck, shfmt },
                    -- javascript = { eslint_d, prettierd },
                    -- javascriptreact = { eslint_d, prettierd },
                    -- typescriptreact = { eslint_d, prettierd },
                    -- svelte = { eslint_d, prettierd },
                    -- vue = { eslint_d, prettierd },
                    -- markdown = { prettierd },
                    -- docker = { hadolint, prettierd },
                    -- solidity = { solhint },
                    -- html = { prettierd },
                    -- css = { prettierd },
                },
            },
        })

        local lsp_fmt_group = vim.api.nvim_create_augroup("LspFormattingGroup", {})
        vim.api.nvim_create_autocmd("BufWritePost", {
            group = lsp_fmt_group,
            callback = function()
                local efm = vim.lsp.get_active_clients({ name = "efm" })

                if vim.tbl_isempty(efm) then
                    return
                end

                vim.lsp.buf.format({ name = "efm" })
            end,
        })
end

}

